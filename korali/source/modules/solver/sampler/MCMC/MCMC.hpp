/** \namespace sampler
* @brief Namespace declaration for modules of type: sampler.
*/

/** \file
* @brief Header file for module: MCMC.
*/

/** \dir solver/sampler/MCMC
* @brief Contains code, documentation, and scripts for module: MCMC.
*/

#pragma once

#include "modules/distribution/univariate/normal/normal.hpp"
#include "modules/distribution/univariate/uniform/uniform.hpp"
#include "modules/solver/sampler/sampler.hpp"
#include <vector>

namespace korali
{
namespace solver
{
namespace sampler
{
;

/**
* @brief Class declaration for module: MCMC.
*/
class MCMC : public Sampler
{
  public: 
  /**
  * @brief Specifies the number of preliminary MCMC steps before samples are being drawn. This may reduce effects from improper initialization.
  */
   size_t _burnIn;
  /**
  * @brief Generates a Markov Chain containing samples from every 'Leap'-th step. This will increase the overall Chain Length by a factor of 'Leap'.
  */
   size_t _leap;
  /**
  * @brief Controls the number of accept-reject stages per MCMC step (by default, this value is set 1, for values greater 1 the delajed rejection algorithm is active.
  */
   size_t _rejectionLevels;
  /**
  * @brief Specifies if covariance matrix of the proposal distribution is calculated from the samples.
  */
   int _useAdaptiveSampling;
  /**
  * @brief Number of steps (after Burn In steps) during which the initial covariance is used instead of the Chain Covariance. If 0 (default) is specified, this value is calibrated as $5%$ of the Max Chain Length (only relevant for Adaptive Sampling).
  */
   size_t _nonAdaptionPeriod;
  /**
  * @brief Learning rate of the Chain Covariance (only relevant for Adaptive Sampling).
  */
   double _chainCovarianceScaling;
  /**
  * @brief [Internal Use] Normal random number generator.
  */
   korali::distribution::univariate::Normal* _normalGenerator;
  /**
  * @brief [Internal Use] Uniform random number generator.
  */
   korali::distribution::univariate::Uniform* _uniformGenerator;
  /**
  * @brief [Internal Use] Cholesky Decomposition of Covariance for sampling (using a lower triangular matrix, with rest zeros).
  */
   std::vector<double> _choleskyDecompositionCovariance;
  /**
  * @brief [Internal Use] Chain Cholesky Decomposition of Covariance for sampling (using a lower triangular matrix, with rest zeros).
  */
   std::vector<double> _choleskyDecompositionChainCovariance;
  /**
  * @brief [Internal Use] Variables of the newest sample in the Markov chain.
  */
   std::vector<double> _chainLeader;
  /**
  * @brief [Internal Use] The logLikelihood of the newest sample in the Markov chain.
  */
   double _chainLeaderEvaluation;
  /**
  * @brief [Internal Use] Candidate variables to be accepted or rejected after comparison with the Chain Leader.
  */
   std::vector<std::vector<double>> _chainCandidate;
  /**
  * @brief [Internal Use] The loglikelihoods of the Chain Candidate Parameters.
  */
   std::vector<double> _chainCandidatesEvaluations;
  /**
  * @brief [Internal Use] Placeholder for recursive calculation of delayed rejection schemes.
  */
   std::vector<double> _rejectionAlphas;
  /**
  * @brief [Internal Use] Ratio proposed to accepted samples (including Burn In period).
  */
   double _acceptanceRate;
  /**
  * @brief [Internal Use] Number of accepted samples (including Burn In period).
  */
   size_t _acceptanceCount;
  /**
  * @brief [Internal Use] Number of proposed samples.
  */
   size_t _proposedSampleCount;
  /**
  * @brief [Internal Use] Parameters generated by MCMC and stored in the database.
  */
   std::vector<std::vector<double>> _sampleDatabase;
  /**
  * @brief [Internal Use] Evaluation associated with the parameters stored in the database.
  */
   std::vector<double> _sampleEvaluationDatabase;
  /**
  * @brief [Internal Use] Mean of Markov Chain calculated from samples in Database.
  */
   std::vector<double> _chainMean;
  /**
  * @brief [Internal Use] Placeholder for chain covariance calculation.
  */
   std::vector<double> _chainCovariancePlaceholder;
  /**
  * @brief [Internal Use] Chain Covariance calculated from samples in Database.
  */
   std::vector<double> _chainCovariance;
  /**
  * @brief [Internal Use] Current Chain Length (including Burn In and Leaped Samples).
  */
   size_t _chainLength;
  /**
  * @brief [Termination Criteria] Number of Samples to Generate.
  */
   size_t _maxSamples;
  
 
  /**
  * @brief Determines whether the module can trigger termination of an experiment run.
  * @return True, if it should trigger termination; false, otherwise.
  */
  bool checkTermination() override;
  /**
  * @brief Obtains the entire current state and configuration of the module.
  * @param js JSON object onto which to save the serialized state of the module.
  */
  void getConfiguration(knlohmann::json& js) override;
  /**
  * @brief Sets the entire state and configuration of the module, given a JSON object.
  * @param js JSON object from which to deserialize the state of the module.
  */
  void setConfiguration(knlohmann::json& js) override;
  /**
  * @brief Applies the module's default configuration upon its creation.
  * @param js JSON object containing user configuration. The defaults will not override any currently defined settings.
  */
  void applyModuleDefaults(knlohmann::json& js) override;
  /**
  * @brief Applies the module's default variable configuration to each variable in the Experiment upon creation.
  */
  void applyVariableDefaults() override;
  

  /**
   * @brief Calculates recursively acceptance probability. Recursion required for Delayed Rejection.
   * @param denominator denominator of quotient (acceptance probability)
   * @param leaderLoglikelihood loglikelihood of current chain leader
   * @param loglikelihoods loglikelihoods of samples obtained after delay
   * @param N rescursion depth
   * @return The acceptance probability
   */
  double recursiveAlpha(double &denominator, const double leaderLoglikelihood, const double *loglikelihoods, size_t N) const;

  /**
   * @brief Updates internal state such as mean and covariance of chain.
   */
  void updateState();

  /**
   * @brief Generate new sample.
   * @param sampleIdx Id of the sample to generate a candidate for
   */
  void generateCandidate(size_t sampleIdx);

  /**
   * @brief Cholesky decomposition of chain covariance matrix.
   * @param inC Input matrix
   * @param outL Output lower triangular decomposed matrix
   */
  void choleskyDecomp(const std::vector<double> &inC, std::vector<double> &outL) const;

  /**
   * @brief Process sample after evaluation.
   * @param sampleId Id of the sample to process
   */
  void finishSample(size_t sampleId);

  /**
   * @brief Configures MCMC.
   */
  void setInitialConfiguration() override;

  /**
   * @brief Final console output at termination.
   */
  void finalize() override;

  /**
   * @brief Generate a sample and evaluate it.
   */
  void runGeneration() override;

  /**
   * @brief Console Output before generation runs.
   */
  void printGenerationBefore() override;

  /**
   * @brief Console output after generation.
   */
  void printGenerationAfter() override;
};

} //sampler
} //solver
} //korali
;
